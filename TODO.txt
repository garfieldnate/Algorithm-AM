Algorithm::AM

Right now: Organize iter variables somehow. Do some cleanup in export vars testing.

Next: Then try to split project into DataSet and ProjectReader classes. Then these sets can just store outcomes, and AM can give them an index at classification time. This will make it easier to pass the test item to hooks, and to use it many other places.

Anytime: What are the itemcontextchain and itemcontextchainhead variables?

Add tests for logging

Add tests for everything in Result that isn't tested yet.

Add logic for classifying items whose correct classification is unknown.

Try to move more of the AM guts stuff back into AM.pm or into Project.pm, or into a new Guts.pm. Right now quite a bit of it is in Result, which seems sub-par.

Add timing accessors to Result.
Do better time handling in Result; something that will allow checking how long classification took would be nice.

Add other bigint helper methods into BigInt and test them, as well.

Make '=' into a constant somewhere so it obvious that it represents UNKNOWN_VARIABLE.

Instead of passing around the "activeVars" variable and skipping nulls if needed, it might make more sense to create an array containing all of the active indices, i.e. [0,1,2,4,6,7] if 3 and 5 are null and exclude nulls is on. This would make it easier to simplify things via `map` or whatever.

Scrub the code for consistent naming. "Data" should be given, or training, or exemplar. Everything is data, so why call anything "data"?

test properly that classification arguments can be given with either the constructor or the classify() method.

do something better than just calling rand() for the probability/skip function.

Projects normally contain separate datasets for training/testing/evaluating. Create another module to hold a dataset. Project can manage 2 datasets (data and test). This would be much more flexible.

change $self->{data/outcome/spec} to $self->{data}->{data/outcome/spec}. $self->{outcome/outcomes} are too similarly named.

Move the XS code to a different package so all of those variables can be stored in something private: pointers, itemcontextchainhead, etc. The work done on gangs could also be put into this package, since it requires special knowledge of the underlying structure. Maybe the Guts package?

Use undef instead of increment for making unique string lists using hashes.

It seems Theron expected no more than 60 data columns. Find out why, and if some warnings are needed for datasets that exceed that.

Add method to remove data from a project.

Change the POD to use Pod::Weaver properly (=method, etc.).

change activeVars to be accepted at classification time

work on types of input to AM dataset
	Right now we have commas and no commas;
	- how about allowing user to specify input separators bigsep and littlesep?
	- how about taking the name of a class that can read and return a data set? It would be nice to then be able to log messages like "Comma Formatter found bad line", which would tell the user which formatter was used, which may have been a mistake.
	- how about allowing users to pass in an extraction sub that will be given lines and returns data?

properly destroy project or AM object on error so that illegal state is not possible even if someone catches an error and tries to continue.

## Other TODOs:

-Figure out good project organization to allow dual builders (MB and EUMM)
-Create an AM old stuff branch
-Think about possibilities of other types of lattices (non-boolean)

#Eventual refactoring plan:
	Algorithm::AM object should be a single classifier, not a batch runner.
		classify() method should classify a single vector
			- that might mean more refactoring of project
		Should move iteration, and iter vars, into a separate class.
	I think beginning vars should just be in the AM object
	Variable access via $data in hooks should be replaced with method access via objects passed to hooks
		these should simplify basic operations for the user; for example:
			outcome strings should be given, instead of numbers (no more outcometonum)
			The user shouldn't be required access arrays starting from index 1, like with @sum
			possibly rename to "subtotals"
			envars should just be given the Result object

## Documentation TODOs:
- Documentation on how to use AM will need to be almost completely re-written, as the API has completely changed.
- Include Wikipedia pictures
- Define all terms early in the documentation and use them consistently. Try to be consistent with machine learning literature. Provide a glossary of terms including usage from ML and AM literature.
	- specifier/comment (set to data unless otherwise specified)
	- outcome/prediction/oracle/label
	- data/exemplar/train/item
	- test, labeled test item, given
	- classify
	- grandtotal/total_pointers/total_score
- Where the documentation says to see 'the red book' or 'the green book' for details, remove the reference and put the details in the text!
- Create tests for each of the example programs in the documentation. This way they are forced to be updated as the API is updated.
