Algorithm::AM

-Create tests to check for errors that should be thrown, or warnings
that should be issued
-Create tests for print formatting variables

-allow user to specify input format
	specify bigsep, littlesep
	specify comment character

-allow user to pass in actual data instead of using project file. P.S. What's the diff between outcome, data, and test?

##Printing TODOs:
-Split print_summary into two methods: print_config and print_data_stats
-Make printing clearer (label gangs, etc.)
-output something about the number of features in the vectors contained in a data file (I think this is done. Just make it clearer?)
-Refactor gangs param into two different boolean params

## Other TODOs:

-rename 'outcome' to something else. Comparison, golden, expected...

-Figure out 'cannot remove directory' errors from dzil release
-Figure out good project organization to allow dual builders (MB and EUMM)
-Create an AM old stuff branch

-make sure decisions on what is in $self and what is in $data are good
	so far, $self has options and $data has info about the input data
		Not so! Now $self has @data, @outcome, and @spec
	It'd be better if $data had classification information (a result object), another variable had per-iteration information, and $self had everything else
	Create accessors for $self

-Eliminate outcometonum
	- using an accessor of some kind

-get rid of difficult (but extremely cool) __DATA__ hack
	At first, put __DATA__ in a separate file for easier browsing
	Maybe use Text::Template or Template toolkit instead of hand markings

#Eventual refactoring plan:
	Algorithm::AM object should be a single classifier, not a batch runner.
		classify() method should classify a single vector
		Should move iteration, and iter vars, into a separate class.
			This will make testing much easier, since we can then simply return classification outcomes in a single variable and test it, instead of testing printed output or accumulating outcomes and testing them.
		Don't print as we go; provide print methods or a verbose option
			also provide method for grabbing format variables
			pass the AM object to hooks so that these are usable
	I think beginning vars should just be in the AM object;
	format vars should also be in the AM object
	usage of outcometonum should be replaced with a method
	@sum should be replaced with something with index starting at 0
		possibly rename to "subtotals"
	I think endvars should be a return value besides being available in the hook.
		should probably also return the entire analogical set...

## Documentation TODOs:
-Write guide on porting old AM code.
	classify, not ->()
	variables
	running batches
	bigcmp
	parameters
-Read through documentation, update/clean if necessary
	Include Wikipedia pictures
-Define "specifier" early on in the documentation. Give the anatomy of a data file.
-Mention that the specifier is the data unless otherwise specified
-remove references to 'the red book'; put all documentation in the code!
